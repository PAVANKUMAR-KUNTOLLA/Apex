{"version":3,"sources":["webpack:///./src/views/Auth/ResetPasswordView.js","webpack:///./src/components/Page.js","webpack:///./src/components/CustomAlert.js"],"names":["useStyles","makeStyles","theme","_logoAvatar","root","backgroundColor","palette","background","dark","height","paddingBottom","spacing","paddingTop","position","logo","_defineProperty","width","padding","breakpoints","down","submitProgress","top","left","marginTop","marginLeft","logoAvatar","up","marginRight","marginBottom","ResetPasswordView","_ref","match","classes","params","useNavigate","useParams","_useState2","_slicedToArray","useState","isAlert","alertTitle","alertText","severity","showAlert","setShowAlert","React","createElement","Page","className","title","CustomAlert","open","onClose","Box","Container","maxWidth","sx","minWidth","xs","sm","minHeight","borderRadius","boxShadow","margin","Avatar","variant","src","Formik","initialValues","password","passwordConfirmation","validationSchema","Yup","shape","required","matches","when","is","val","length","then","oneOf","onSubmit","values","_ref2","setSubmitting","resetForm","url","Api","resetPassword","data","uidb64","token","config","headers","Cookies","get","axios","post","res","status","error","console","log","_ref3","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","autoComplete","mb","Typography","color","TextField","Boolean","fullWidth","helperText","label","name","onBlur","onChange","type","value","my","Button","disabled","size","CircularProgress","Link","component","RouterLink","to","forwardRef","ref","children","_ref$title","rest","_objectWithoutProperties","_excluded","_extends","Helmet","propTypes","PropTypes","node","isRequired","string","alertContainer","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","AlertTitle","prototype","bool","func"],"mappings":"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","file":"ResetPasswordView.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  CircularProgress,\r\n  Avatar,\r\n} from \"@mui/material\";\r\n\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CustomAlert from \"../../components/CustomAlert\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport { Formik } from \"formik\";\r\nimport Cookies from \"js-cookie\";\r\nimport axios from \"axios\";\r\nimport Api from \"../../components/Api\";\r\n\r\nimport Page from \"../../components/Page\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: \"100%\",\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n    position: \"relative\",\r\n  },\r\n\r\n  logo: {\r\n    width: 150,\r\n    padding: 10,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: 110,\r\n    },\r\n  },\r\n  submitProgress: {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginTop: -12,\r\n    marginLeft: -12,\r\n  },\r\n  logoAvatar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: \"0px\",\r\n      marginRight: \"auto\",\r\n      marginTop: \"15px\",\r\n      marginBottom: \"15px\",\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginLeft: \"auto\",\r\n      marginRight: \"150px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ResetPasswordView = ({ match }) => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const [showAlert, setShowAlert] = useState({\r\n    isAlert: false,\r\n    alertTitle: \"\",\r\n    alertText: \"\",\r\n    severity: \"\",\r\n  });\r\n\r\n  return (\r\n    <Page className={classes.root} title=\"Reset Password\">\r\n      {showAlert.isAlert ? (\r\n        <CustomAlert\r\n          open={showAlert.isAlert}\r\n          severity={showAlert.severity}\r\n          alertTitle={showAlert.alertTitle}\r\n          alertText={showAlert.alertText}\r\n          onClose={() =>\r\n            setShowAlert({\r\n              isAlert: false,\r\n              alertTitle: \"\",\r\n              alertText: \"\",\r\n              severity: \"\",\r\n            })\r\n          }\r\n        />\r\n      ) : null}\r\n      <Box>\r\n        <Container maxWidth=\"md\">\r\n          {/* <Box className={classes.leftSide}>\r\n            <Avatar\r\n              variant=\"square\"\r\n              src=\"/static/img/onecall-logo.png\"\r\n              className={classes.avatarLogo}\r\n            />\r\n          </Box> */}\r\n\r\n          <Box\r\n            // className={classes.rightSide}\r\n            sx={{\r\n              minWidth: \"350px\",\r\n              maxWidth: { xs: \"350px\", sm: \"500px\" },\r\n              minHeight: \"450px\",\r\n              backgroundColor: \"rgba(255,255,255,1)\",\r\n              borderRadius: \"4px\",\r\n              boxShadow: \"rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n              margin: \"15% auto 0\",\r\n              padding: \"24px\",\r\n            }}\r\n          >\r\n            <Avatar\r\n              variant=\"square\"\r\n              src=\"/static/img/apexlogo.png\"\r\n              sx={{\r\n                // flexGrow: 1,\r\n                height: 60,\r\n                width: 170,\r\n              }}\r\n              className={classes.logoAvatar}\r\n            />\r\n            <Formik\r\n              initialValues={{\r\n                password: \"\",\r\n                passwordConfirmation: \"\",\r\n              }}\r\n              validationSchema={Yup.object().shape({\r\n                password: Yup.string()\r\n                  .required(\"Please enter your password\")\r\n                  .matches(\r\n                    /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\r\n                    \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\r\n                  ),\r\n\r\n                passwordConfirmation: Yup.string().when(\"password\", {\r\n                  is: (val) => (val && val.length > 0 ? true : false),\r\n                  then: Yup.string().oneOf(\r\n                    [Yup.ref(\"password\")],\r\n                    \"Both password need to be the same\"\r\n                  ),\r\n                }),\r\n              })}\r\n              onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                const url = Api.resetPassword;\r\n\r\n                let data = {\r\n                  password: values[\"password\"],\r\n                  uidb64: params.uidb64,\r\n                  token: params.token,\r\n                };\r\n\r\n                const config = {\r\n                  headers: {\r\n                    \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\r\n                  },\r\n                };\r\n\r\n                axios\r\n                  .post(url, data, config)\r\n                  .then((res) => {\r\n                    const { status, data } = res;\r\n                    if (status === 200) {\r\n                      setSubmitting(false);\r\n                      setShowAlert({\r\n                        isAlert: true,\r\n                        alertText: data?.[\"message\"],\r\n                        severity: \"success\",\r\n                      });\r\n                      resetForm();\r\n                    }\r\n                  })\r\n                  .catch((error) => {\r\n                    console.log(error);\r\n                    setSubmitting(false);\r\n                    setShowAlert({\r\n                      isAlert: true,\r\n                      alertText: \"Something went wrong\",\r\n                      severity: \"error\",\r\n                      alertTitle: \"Error\",\r\n                    });\r\n                    resetForm();\r\n                  });\r\n              }}\r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values,\r\n              }) => (\r\n                <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                  <Box mb={3}>\r\n                    <Typography color=\"textPrimary\" variant=\"h2\">\r\n                      Reset Password\r\n                    </Typography>\r\n                  </Box>\r\n                  <TextField\r\n                    error={Boolean(touched.password && errors.password)}\r\n                    fullWidth\r\n                    helperText={touched.password && errors.password}\r\n                    label=\"Password\"\r\n                    margin=\"normal\"\r\n                    name=\"password\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"password\"\r\n                    value={values.password}\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <TextField\r\n                    error={Boolean(\r\n                      touched.passwordConfirmation &&\r\n                        errors.passwordConfirmation\r\n                    )}\r\n                    fullWidth\r\n                    helperText={\r\n                      touched.passwordConfirmation &&\r\n                      errors.passwordConfirmation\r\n                    }\r\n                    label=\"Confirm Password\"\r\n                    margin=\"normal\"\r\n                    name=\"passwordConfirmation\"\r\n                    onBlur={handleBlur}\r\n                    onChange={handleChange}\r\n                    type=\"password\"\r\n                    value={values.passwordConfirmation}\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <Box my={2}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      disabled={isSubmitting}\r\n                      fullWidth\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                    >\r\n                      Reset Password\r\n                      {isSubmitting && (\r\n                        <CircularProgress\r\n                          size={24}\r\n                          className={classes.submitProgress}\r\n                        />\r\n                      )}\r\n                    </Button>\r\n                  </Box>\r\n                  <Typography color=\"textSecondary\" variant=\"body1\">\r\n                    Go back to{\" \"}\r\n                    <Link component={RouterLink} to=\"/login\" variant=\"h6\">\r\n                      Sign in\r\n                    </Link>\r\n                  </Typography>\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordView;\r\n","import React, { forwardRef } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport PropTypes from \"prop-types\";\n\nconst Page = forwardRef(({ children, title = \"\", ...rest }, ref) => {\n  return (\n    <div ref={ref} {...rest}>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n    </div>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Page;\n","import React from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Snackbar } from \"@mui/material\";\nimport { Alert, AlertTitle } from \"@mui/material\";\n\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(10),\n    boxShadow: \"-2px 5px 15px -2px rgba(0,0,0,0.71)\",\n  },\n  alertContainer: {\n    minWidth: 350,\n  },\n}));\n\nconst CustomAlert = ({ open, severity, alertTitle, alertText, onClose }) => {\n  let vertical = \"top\",\n    horizontal = \"right\";\n\n  const classes = useStyles();\n\n  return (\n    <Snackbar\n      anchorOrigin={{ vertical, horizontal }}\n      open={open}\n      autoHideDuration={6000}\n      onClose={onClose}\n      className={classes.root}\n    >\n      <Alert\n        severity={severity}\n        onClose={onClose}\n        className={classes.alertContainer}\n      >\n        {alertTitle ? <AlertTitle>{alertTitle}</AlertTitle> : null}\n        {alertText}!\n      </Alert>\n    </Snackbar>\n  );\n};\n\nCustomAlert.prototype = {\n  open: PropTypes.bool,\n  severity: PropTypes.string, //['success','warning', 'error']\n  alertText: PropTypes.string,\n  alertTitle: PropTypes.string,\n  onClose: PropTypes.func,\n};\n\nexport default CustomAlert;\n"],"sourceRoot":""}